// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum OrderEventStatus {
  PENDING
  ACCEPTED
  OUT_FOR_DELIVERY
  DELIVERED
  CANCELLED
}

enum ActivityStatus {
  ONLINE
  OFFLINE
  BUSY
}

model User{
  id       String   @id @default(uuid())
  email    String   @unique
  password String
  phone_number String?
  name      String
  address   Json?
  refresh_token String[]
  verification_code  String?
  resetPasswordToken String?
  balance Float @default(300000)
  isVerified         Boolean   @default(false)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  orders    Order[]
  cartItem  CartItem[]
  wishlists Wishlist[]

}

model Merchant{
  id       String   @id @default(uuid())
  name     String
  email    String   @unique
  password String
  address  String
  phone    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  dp        String
  website   String?
  bank_name String?
  account_name String?
  account_number Int?
  verification_code  String?
  resetPasswordToken String?
  isVerified         Boolean   @default(false)
  balance Int @default(0)
  status  ActivityStatus @default(ONLINE)
  refresh_token String[] 
  

  products Product[]

}

model Product {
  id        String   @id @default(uuid())
  name      String
  category  String
  slug      String[]
  description String
  price      Float
  dp         String
  images     String[]
  variation  Json?
  merchant_id String
  quantity   Int
  discount_type String?
  discount_amount Int?
  opening_date String?
  available_till Int?
  delivery_duration Int
  dispatch_location String
  unit  String
  product_type String
  inStock    Boolean @default(true)
  merchant Merchant  @relation(fields: [merchant_id], references: [id])
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  OrderProduct OrderProduct[]
  suplementryProducts SuplementryProduct[]
  cartIntems CartItem[]
  wishlists Wishlist[]
}

model SuplementryProduct{
  id        String   @id @default(uuid())
  name      String
  product_id  String
  quantity    Int
  price      Float
  dp          String


  product Product @relation(fields: [product_id], references: [id],onDelete: Cascade)
  cartItemSplementry CartItemSupplement[]
}

model Category {
  id        String   @id @default(uuid())
  name      String   @unique
  slug      String[]
  status    Boolean @default(true)
  description String
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  subCategory SubCategory[]
}

model SubCategory {
  id        String   @id @default(uuid())
  name      String   @unique
  slug      String[]
  category_id String
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  category Category @relation(fields: [category_id],references: [id],onDelete: Cascade)
}

model CartItem {
  id                   String            @id @default(uuid())
  userId               String
  user                 User              @relation(fields: [userId], references: [id],onDelete: Cascade)
  productId            String
  product              Product           @relation(fields: [productId], references: [id],onDelete: Cascade)
  quantity             Int
  variation            Json?
  supplementaryProducts CartItemSupplement[]
  price                Float
  batchId              String?
  total                Float
  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt

  @@map("cart_items")
}

model CartItemSupplement {
  id         String   @id @default(uuid())
  cartItemId String
  productId  String

  cartItem   CartItem @relation(fields: [cartItemId], references: [id], onDelete: Cascade)
  product    SuplementryProduct  @relation(fields: [productId], references: [id])

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Order {
  id        String           @id @default(uuid())
  userId    String           @default(uuid())
  user      User             @relation(fields: [userId], references: [id],onDelete: Cascade)
  netAmount Decimal
  address   String
  status    OrderEventStatus @default(PENDING)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  products  OrderProduct[]
  events    OrderEvents[]

}

model OrderProduct {
  id        String   @id @default(uuid())
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id],onDelete: Cascade)
  productId String
  price     Float
  product   Product  @relation(fields: [productId], references: [id],onDelete: Cascade)
  status    OrderEventStatus @default(PENDING)
  quantity  Int
  variation  Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}

model Wishlist {
  id        String   @id @default(uuid())
  userId    String
  product_id String   @unique

  products Product   @relation(fields: [product_id],references: [id],onDelete: Cascade)
  users User @relation(fields: [userId],references: [id],onDelete: Cascade)
}

model OrderEvents {
  id        String           @id @default(uuid())
  orderId   String
  order     Order            @relation(fields: [orderId], references: [id],onDelete: Cascade)
  status    OrderEventStatus @default(PENDING)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  @@map("order_events")
}

model DispatchLocation{
  id        String           @id @default(uuid()) 
  country   String
  state     String
  city      String
  lga       String
  address   String           @unique
}